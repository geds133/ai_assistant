from langchain.prompts import PromptTemplate
from langchain_openai import OpenAI
from langchain.chains import SequentialChain
import argparse
import os
from dotenv import load_dotenv

load_dotenv()

# Creating a parser
parser = argparse.ArgumentParser()
parser.add_argument("--subject", default="the weather")
args = parser.parse_args()

# Function to interact with the OpenAI API
def ask_llm(prompt):
    """
    Sends a user prompt to an LLM (Language Model) and returns the model's response.

    This function interacts with an AI language model (in this case, `gpt-4o`) using 
    a predefined system message and the user-provided prompt. The model generates 
    a response with a maximum of 1000 tokens, and the temperature is set to 0 
    for deterministic outputs.

    Parameters:
    ----------
    prompt : str
        The prompt or question to be sent to the language model.

    Returns:
    -------
    str
        The response generated by the language model based on the given prompt.
    """
      
    #response = llm.chat.completions.create(
    #    model='gpt-4o',
    #    messages=[
    #        {"role": "system", "content": "You are a helpful assistant."},
    #        {"role": "user", "content": prompt}
    #    ],
    #    max_tokens=1000,
    #    temperature=0
    #)
    #return response.choices[0].message.content

def main(subject: str):

    llm = OpenAI(api_key=os.environ['open_ai_key'])

    # Initial news chain
    news_article_prompt = PromptTemplate(
        template="Give me the latest news on {subject} and give me an as_of_date and the news sources",
        input_variables=['subject'])

    news_summary_prompt = PromptTemplate(
        template="Write me a short paragraph based on the news stories received about {subject} and assess the news sources credibility.",
        input_variables=['subject'])

    news_article_chain = news_article_prompt | llm

    news_summary_chain = news_summary_prompt | llm

    news_chain = news_article_chain | news_summary_chain

    result = news_chain.invoke({"subject": subject})

    return ask_llm(result)

if __name__ == '__main__':
    subject = args.subject

    message = main(subject=subject)
    print(message)